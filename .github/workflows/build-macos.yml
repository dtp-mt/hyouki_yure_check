name: build-macos (arm64 & intel)

on:
  push:
    tags: ['v*', 'release-*']   # タグを切ったらビルド
  workflow_dispatch:            # 手動実行

concurrency:
  group: macos-${{ github.ref }}
  cancel-in-progress: false

env:
  APP_NAME: HyoukiYureCheck
  ENTRYPOINT: hyouki_yure_check.py   # ← あなたのエントリーファイル名に合わせて変更

jobs:
  build:
    name: macOS ${{ matrix.runner }} • PyInstaller
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        # Apple Silicon (arm64) と Intel (x86_64) を並列ビルド
        runner: [macos-14, macos-15-intel]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          # 依存（requirements にあるならこの行は残しつつ、念のため明示インストール）
          pip install -r requirements.txt || true
          pip install "fugashi[unidic-lite]" PyMuPDF PySide6 pandas
          pip install pyinstaller

      - name: Sanity check DICDIR (optional)
        run: |
          python - <<'PY'
          import unidic_lite
          print("unidic_lite.DICDIR =", getattr(unidic_lite, "DICDIR", None))
          PY

      - name: Build (.app) with PyInstaller
        shell: bash
        run: |
          pyinstaller --noconfirm --clean --windowed \
            --name "${APP_NAME}" \
            --hidden-import fitz \
            --hidden-import unidic_lite \              # ← DICDIR 定義のため必須
            --collect-data unidic_lite \               # ← 辞書データを同梱
            --collect-data fugashi \                   # ← 安全側に同梱
            "${ENTRYPOINT}"

      - name: Pack .dmg (compressed)
        shell: bash
        run: |
          cd dist
          APP="${APP_NAME}.app"
          DMG="${APP_NAME}-${{ matrix.runner }}.dmg"
          # UDZO で圧縮された DMG を作成
          hdiutil create -volname "${APP_NAME}" \
            -srcfolder "${APP}" \
            -ov -format UDZO "${DMG}"
          # .dmg だけ残して .app は消して容量節約（アーティファクトも .dmg のみ）
          rm -rf "${APP}"

      - name: Upload artifact (.dmg only)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runner }}-macos-${{ env.APP_NAME }}
          path: dist/${{ env.APP_NAME }}-${{ matrix.runner }}.dmg
