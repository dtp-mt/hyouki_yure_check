name: build-macos (arm64 & intel, ginza)

on:
  push:
    tags: ['v*', 'release-*']
  workflow_dispatch:

concurrency:
  group: macos-${{ github.ref }}-ginza
  cancel-in-progress: false

env:
  APP_NAME: HyoukiYureCheck
  ENTRYPOINT: hyouki_yure_check.py

jobs:
  build:
    name: macOS ${{ matrix.runner }} • PyInstaller • ginza
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-14, macos-15-intel]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Show environment
        shell: bash
        run: |
          set -euo pipefail
          uname -a
          python -V
          echo "Runner: ${{ matrix.runner }}"
          echo "ENTRYPOINT=${ENTRYPOINT}"

      - name: Install dependencies (base + GiNZA)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip wheel

          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          else
            # ベース依存（requirements.txt が無い場合の保険）
            pip install "fugashi[unidic-lite]" PyMuPDF PySide6 pandas
            pip install xlsxwriter openpyxl
          fi

          # --- GiNZA スタック（軽量モデル） ---
          pip install "spacy>=3.7,<3.8" "ginza>=5,<6" "ja_ginza>=5,<6" "SudachiPy>=0.6" "sudachidict_core>=2023.1"

          # PyInstaller
          pip install pyinstaller

      - name: Sanity check DICDIR (MeCab / unidic_lite)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import unidic_lite
          print("unidic_lite.DICDIR =", getattr(unidic_lite, "DICDIR", None))
          print("unidic_lite sanity: OK")
          PY

      - name: Sanity check GiNZA
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import spacy, ginza  # noqa
          nlp = spacy.load("ja_ginza")
          doc = nlp("これはテストです。")
          print("GiNZA OK. sentences:", len(list(doc.sents)))
          PY

      # （保険）PyInstaller 用フックを用意：モデル/辞書の取りこぼし防止
      - name: Create PyInstaller hooks
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p hooks
          cat > hooks/hook-ja_ginza.py <<'PY'
          from PyInstaller.utils.hooks import collect_data_files, collect_submodules
          datas = collect_data_files("ja_ginza", include_py_files=True)
          hiddenimports = collect_submodules("ja_ginza")
          PY
          cat > hooks/hook-sudachidict_core.py <<'PY'
          from PyInstaller.utils.hooks import collect_data_files
          datas = collect_data_files("sudachidict_core", include_py_files=False)
          PY
          ls -al hooks

      - name: Build (.app) with PyInstaller
        shell: bash
        run: |
          set -euo pipefail

          if [[ ! -f "$ENTRYPOINT" ]]; then
            echo "::error title=ENTRYPOINT not found::'$ENTRYPOINT' が見つかりません。env.ENTRYPOINT と実ファイル名/パスを確認してください。"
            echo "リポジトリのルート内容:"; ls -al
            exit 1
          fi

          # PyInstaller のオプションを配列に（コメント混在でも安全）
          OPTS=(
            --noconfirm
            --clean
            --windowed
            --name "$APP_NAME"

            # Excel / MeCab / 基本依存
            --hidden-import fitz
            --hidden-import unidic_lite
            --hidden-import xlsxwriter
            --hidden-import openpyxl
            --hidden-import et_xmlfile
            --collect-data unidic_lite
            --collect-data fugashi

            # GiNZA / spaCy / Sudachi の同梱
            --hidden-import ginza
            --hidden-import ja_ginza
            --hidden-import sudachipy
            --hidden-import spacy.lang.ja
            --hidden-import spacy_legacy
            --collect-data spacy
            --collect-data ginza
            --collect-data ja_ginza
            --collect-data sudachidict_core
            --collect-data sudachipy
            --collect-all spacy_legacy
            --collect-submodules ginza
            --additional-hooks-dir hooks
          )

          echo ">>> Running: pyinstaller ${OPTS[*]} \"$ENTRYPOINT\""
          pyinstaller "${OPTS[@]}" "$ENTRYPOINT"

      - name: Pack .dmg (compressed) & keep only .dmg
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          APP="${APP_NAME}.app"
          DMG="${APP_NAME}-${{ matrix.runner }}.dmg"
          hdiutil create -volname "${APP_NAME}" -srcfolder "${APP}" -ov -format UDZO "${DMG}"
          rm -rf "${APP}"
          ls -al

      - name: Upload artifact (.dmg only)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runner }}-macos-${{ env.APP_NAME }}
          path: dist/${{ env.APP_NAME }}-${{ matrix.runner }}.dmg
